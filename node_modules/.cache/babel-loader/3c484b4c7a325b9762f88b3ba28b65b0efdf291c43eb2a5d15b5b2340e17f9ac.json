{"ast":null,"code":"var _jsxFileName = \"C:\\\\SlyStudios\\\\Coursera\\\\SlyCapstoneProject\\\\src\\\\components\\\\bookingTimesContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingTimesContext = /*#__PURE__*/createContext({\n  bookingTimes: [],\n  setTimeUnavailable: () => {}\n});\n\n// Provider component\nexport const BookingTimesProvider = ({\n  children\n}) => {\n  _s();\n  const [bookingTimes, setBookingTimes] = useState([]);\n  useEffect(() => {\n    const fetchBookingTimes = async () => {\n      try {\n        const date = new Date(); // Gets today's date\n        const apiResponse = await fetchAPI(date); // Calls external fetchAPI function\n        const updatedBookingTimes = apiResponse.map(time => ({\n          time,\n          isAvailable: true // Defaults to all times being available so code works. API works so that whatever times are\n          // found are assumed as the available ones\n        }));\n        setBookingTimes(updatedBookingTimes); // Update state with fetched data\n      } catch (error) {\n        console.error(\"Error fetching booking times:\", error);\n      }\n    };\n    fetchBookingTimes();\n  }, []); // Dependency array ensures it runs only once on mount\n\n  // Function to set a specific time as unavailable\n  const setTimeUnavailable = selectedTime => {\n    setBookingTimes(prevBookingTimes => prevBookingTimes.map(timeSlot => timeSlot.time === selectedTime ? {\n      ...timeSlot,\n      isAvailable: false\n    } : timeSlot));\n  };\n  return /*#__PURE__*/_jsxDEV(BookingTimesContext.Provider, {\n    value: {\n      bookingTimes,\n      setTimeUnavailable\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(BookingTimesProvider, \"fqAsqQA7cmho5vhqQ5NBHj9XeGk=\");\n_c = BookingTimesProvider;\nexport const useBookingTimes = () => {\n  _s2();\n  return useContext(BookingTimesContext);\n};\n_s2(useBookingTimes, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default BookingTimesContext;\nvar _c;\n$RefreshReg$(_c, \"BookingTimesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","BookingTimesContext","bookingTimes","setTimeUnavailable","BookingTimesProvider","children","_s","setBookingTimes","fetchBookingTimes","date","Date","apiResponse","fetchAPI","updatedBookingTimes","map","time","isAvailable","error","console","selectedTime","prevBookingTimes","timeSlot","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingTimes","_s2","$RefreshReg$"],"sources":["C:/SlyStudios/Coursera/SlyCapstoneProject/src/components/bookingTimesContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Create context\r\nconst BookingTimesContext = createContext({\r\n  bookingTimes: [],\r\n  setTimeUnavailable: () => {}\r\n});\r\n\r\n// Provider component\r\nexport const BookingTimesProvider = ({ children }) => {\r\n  const [bookingTimes, setBookingTimes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBookingTimes = async () => {\r\n      try {\r\n        const date = new Date(); // Gets today's date\r\n        const apiResponse = await fetchAPI(date); // Calls external fetchAPI function\r\n        const updatedBookingTimes = apiResponse.map((time) => ({\r\n          time,\r\n          isAvailable: true // Defaults to all times being available so code works. API works so that whatever times are\r\n                            // found are assumed as the available ones\r\n        }));\r\n\r\n        setBookingTimes(updatedBookingTimes); // Update state with fetched data\r\n      } catch (error) {\r\n        console.error(\"Error fetching booking times:\", error);\r\n      }\r\n    };\r\n\r\n    fetchBookingTimes();\r\n  }, []); // Dependency array ensures it runs only once on mount\r\n\r\n  // Function to set a specific time as unavailable\r\n  const setTimeUnavailable = (selectedTime) => {\r\n    setBookingTimes((prevBookingTimes) =>\r\n      prevBookingTimes.map((timeSlot) =>\r\n        timeSlot.time === selectedTime\r\n          ? { ...timeSlot, isAvailable: false }\r\n          : timeSlot\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BookingTimesContext.Provider value={{ bookingTimes, setTimeUnavailable }}>\r\n      {children}\r\n    </BookingTimesContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the context\r\nexport const useBookingTimes = () => {\r\n  return useContext(BookingTimesContext);\r\n};\r\n\r\nexport default BookingTimesContext;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC;EACxCO,YAAY,EAAE,EAAE;EAChBC,kBAAkB,EAAEA,CAAA,KAAM,CAAC;AAC7B,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACJ,YAAY,EAAEK,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzB,MAAMC,WAAW,GAAG,MAAMC,QAAQ,CAACH,IAAI,CAAC,CAAC,CAAC;QAC1C,MAAMI,mBAAmB,GAAGF,WAAW,CAACG,GAAG,CAAEC,IAAI,KAAM;UACrDA,IAAI;UACJC,WAAW,EAAE,IAAI,CAAC;UACA;QACpB,CAAC,CAAC,CAAC;QAEHT,eAAe,CAACM,mBAAmB,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDT,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAML,kBAAkB,GAAIgB,YAAY,IAAK;IAC3CZ,eAAe,CAAEa,gBAAgB,IAC/BA,gBAAgB,CAACN,GAAG,CAAEO,QAAQ,IAC5BA,QAAQ,CAACN,IAAI,KAAKI,YAAY,GAC1B;MAAE,GAAGE,QAAQ;MAAEL,WAAW,EAAE;IAAM,CAAC,GACnCK,QACN,CACF,CAAC;EACH,CAAC;EAED,oBACErB,OAAA,CAACC,mBAAmB,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAErB,YAAY;MAAEC;IAAmB,CAAE;IAAAE,QAAA,EACvEA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;;AAED;AAAArB,EAAA,CAzCaF,oBAAoB;AAAAwB,EAAA,GAApBxB,oBAAoB;AA0CjC,OAAO,MAAMyB,eAAe,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnC,OAAOlC,UAAU,CAACK,mBAAmB,CAAC;AACxC,CAAC;AAAC6B,GAAA,CAFWD,eAAe;AAI5B,eAAe5B,mBAAmB;AAAC,IAAA2B,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}