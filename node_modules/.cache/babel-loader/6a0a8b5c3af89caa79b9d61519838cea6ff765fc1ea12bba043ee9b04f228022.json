{"ast":null,"code":"var _jsxFileName = \"C:\\\\SlyStudios\\\\Coursera\\\\SlyCapstoneProject\\\\src\\\\components\\\\bookingTimesContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// initial all booking times (that would come from API)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialBookingTimes = [{\n  time: \"11:00\",\n  isAvailable: true\n}, {\n  time: \"11:30\",\n  isAvailable: true\n}, {\n  time: \"12:00\",\n  isAvailable: true\n}, {\n  time: \"12:30\",\n  isAvailable: true\n}, {\n  time: \"13:00\",\n  isAvailable: true\n}, {\n  time: \"13:30\",\n  isAvailable: true\n}, {\n  time: \"14:00\",\n  isAvailable: true\n}, {\n  time: \"14:30\",\n  isAvailable: true\n}, {\n  time: \"15:00\",\n  isAvailable: true\n}, {\n  time: \"15:30\",\n  isAvailable: true\n}, {\n  time: \"16:00\",\n  isAvailable: true\n}, {\n  time: \"16:30\",\n  isAvailable: true\n}, {\n  time: \"17:00\",\n  isAvailable: true\n}, {\n  time: \"17:30\",\n  isAvailable: true\n}, {\n  time: \"18:00\",\n  isAvailable: true\n}, {\n  time: \"18:30\",\n  isAvailable: true\n}, {\n  time: \"19:00\",\n  isAvailable: true\n}, {\n  time: \"19:30\",\n  isAvailable: true\n}, {\n  time: \"20:00\",\n  isAvailable: true\n}, {\n  time: \"20:30\",\n  isAvailable: true\n}];\nconst BookingTimesContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const BookingTimesProvider = ({\n  children\n}) => {\n  _s();\n  const [bookingTimes, setBookingTimes] = useState(initialBookingTimes);\n\n  // Fetch available times from API\n  useEffect(() => {\n    const fetchAvailableTimes = async () => {\n      try {\n        const today = new Date().toISOString().split(\"T\")[0]; // Format today's date\n        const availableTimes = fetchAPI(today); // Call fetchAPI with today's date\n        console.log(\"Fetched times from API:\", availableTimes); // Log to verify\n        // Map fetched times into the expected format\n        const formattedTimes = availableTimes.map(time => ({\n          time,\n          isAvailable: true // Assume all fetched times are available\n        }));\n        setBookingTimes(formattedTimes); // Replace hardcoded times with API data\n      } catch (error) {\n        console.error(\"Error fetching booking times:\", error);\n      }\n    };\n    fetchAvailableTimes();\n  }, []);\n\n  // sets a specific time as unavailable\n  const setTimeUnavailable = selectedTime => {\n    setBookingTimes(prevBookingTimes => prevBookingTimes.map(timeSlot => timeSlot.time === selectedTime ? {\n      ...timeSlot,\n      isAvailable: false\n    } : timeSlot));\n  };\n  return /*#__PURE__*/_jsxDEV(BookingTimesContext.Provider, {\n    value: {\n      bookingTimes,\n      setTimeUnavailable\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(BookingTimesProvider, \"3ujqd1vg0Bed6zxIvYEkRheRu2c=\");\n_c = BookingTimesProvider;\nexport const useBookingTimes = () => {\n  _s2();\n  return useContext(BookingTimesContext);\n};\n_s2(useBookingTimes, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default BookingTimesContext;\nvar _c;\n$RefreshReg$(_c, \"BookingTimesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","initialBookingTimes","time","isAvailable","BookingTimesContext","BookingTimesProvider","children","_s","bookingTimes","setBookingTimes","fetchAvailableTimes","today","Date","toISOString","split","availableTimes","fetchAPI","console","log","formattedTimes","map","error","setTimeUnavailable","selectedTime","prevBookingTimes","timeSlot","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBookingTimes","_s2","$RefreshReg$"],"sources":["C:/SlyStudios/Coursera/SlyCapstoneProject/src/components/bookingTimesContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// initial all booking times (that would come from API)\r\nconst initialBookingTimes = [\r\n  { time: \"11:00\", isAvailable: true },\r\n  { time: \"11:30\", isAvailable: true },\r\n  { time: \"12:00\", isAvailable: true },\r\n  { time: \"12:30\", isAvailable: true },\r\n  { time: \"13:00\", isAvailable: true },\r\n  { time: \"13:30\", isAvailable: true },\r\n  { time: \"14:00\", isAvailable: true },\r\n  { time: \"14:30\", isAvailable: true },\r\n  { time: \"15:00\", isAvailable: true },\r\n  { time: \"15:30\", isAvailable: true },\r\n  { time: \"16:00\", isAvailable: true },\r\n  { time: \"16:30\", isAvailable: true },\r\n  { time: \"17:00\", isAvailable: true },\r\n  { time: \"17:30\", isAvailable: true },\r\n  { time: \"18:00\", isAvailable: true },\r\n  { time: \"18:30\", isAvailable: true },\r\n  { time: \"19:00\", isAvailable: true },\r\n  { time: \"19:30\", isAvailable: true },\r\n  { time: \"20:00\", isAvailable: true },\r\n  { time: \"20:30\", isAvailable: true }\r\n];\r\n\r\nconst BookingTimesContext = createContext();\r\n\r\n// Provider component\r\nexport const BookingTimesProvider = ({ children }) => {\r\n  const [bookingTimes, setBookingTimes] = useState(initialBookingTimes);\r\n\r\n   // Fetch available times from API\r\n   useEffect(() => {\r\n    const fetchAvailableTimes = async () => {\r\n      try {\r\n        const today = new Date().toISOString().split(\"T\")[0]; // Format today's date\r\n        const availableTimes = fetchAPI(today); // Call fetchAPI with today's date\r\n        console.log(\"Fetched times from API:\", availableTimes); // Log to verify\r\n        // Map fetched times into the expected format\r\n        const formattedTimes = availableTimes.map((time) => ({\r\n          time,\r\n          isAvailable: true, // Assume all fetched times are available\r\n        }));\r\n        setBookingTimes(formattedTimes); // Replace hardcoded times with API data\r\n      } catch (error) {\r\n        console.error(\"Error fetching booking times:\", error);\r\n      }\r\n    };\r\n\r\n    fetchAvailableTimes();\r\n  }, []);\r\n\r\n  // sets a specific time as unavailable\r\n  const setTimeUnavailable = (selectedTime) => {\r\n    setBookingTimes((prevBookingTimes) =>\r\n      prevBookingTimes.map((timeSlot) =>\r\n        timeSlot.time === selectedTime\r\n          ? { ...timeSlot, isAvailable: false }\r\n          : timeSlot\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <BookingTimesContext.Provider value={{ bookingTimes, setTimeUnavailable }}>\r\n      {children}\r\n    </BookingTimesContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the context\r\nexport const useBookingTimes = () => useContext(BookingTimesContext);\r\n\r\nexport default BookingTimesContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}