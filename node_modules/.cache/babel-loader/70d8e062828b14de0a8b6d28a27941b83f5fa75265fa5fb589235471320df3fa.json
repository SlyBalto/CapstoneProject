{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useBookingTimes } from './bookingTimesContext';\n\n// Custom hook to filter available booking times\nexport const useFilterAvailableTimes = () => {\n  _s();\n  const {\n    bookingTimes\n  } = useBookingTimes();\n  const currentTime = new Date();\n  return bookingTimes.filter(({\n    time,\n    isAvailable\n  }) => {\n    if (!isAvailable) return false;\n\n    // Convert the time (e.g., \"14:30\") to a Date object for today to compare with the current time\n    const [hours, minutes] = time.split(':').map(Number);\n    const timeDate = new Date();\n    timeDate.setHours(hours, minutes, 0, 0);\n\n    // Only include times that are in the future\n    return timeDate > currentTime;\n  });\n};\n\n// Custom hook to get the first three available future times\n_s(useFilterAvailableTimes, \"5SQ6XY1VaxsuA6tFct1p2hmZs+A=\", false, function () {\n  return [useBookingTimes];\n});\nexport const useFirstThreeAvailableTimes = () => {\n  _s2();\n  const availableTimes = useFilterAvailableTimes();\n  return availableTimes.slice(0, 3); // Get only the first three available times\n};\n_s2(useFirstThreeAvailableTimes, \"iiRRSlM7Tav0Ktipu5Gp8IdR+iE=\", false, function () {\n  return [useFilterAvailableTimes];\n});","map":{"version":3,"names":["useBookingTimes","useFilterAvailableTimes","_s","bookingTimes","currentTime","Date","filter","time","isAvailable","hours","minutes","split","map","Number","timeDate","setHours","useFirstThreeAvailableTimes","_s2","availableTimes","slice"],"sources":["C:/SlyStudios/Coursera/SlyCapstoneProject/src/utilities/useFilterAvailableTimes.js"],"sourcesContent":["import { useBookingTimes } from './bookingTimesContext';\r\n\r\n// Custom hook to filter available booking times\r\nexport const useFilterAvailableTimes = () => {\r\n  const { bookingTimes } = useBookingTimes();\r\n  const currentTime = new Date();\r\n\r\n  return bookingTimes.filter(({ time, isAvailable }) => {\r\n    if (!isAvailable) return false;\r\n\r\n    // Convert the time (e.g., \"14:30\") to a Date object for today to compare with the current time\r\n    const [hours, minutes] = time.split(':').map(Number);\r\n    const timeDate = new Date();\r\n    timeDate.setHours(hours, minutes, 0, 0);\r\n\r\n    // Only include times that are in the future\r\n    return timeDate > currentTime;\r\n  });\r\n};\r\n\r\n// Custom hook to get the first three available future times\r\nexport const useFirstThreeAvailableTimes = () => {\r\n  const availableTimes = useFilterAvailableTimes();\r\n  return availableTimes.slice(0, 3); // Get only the first three available times\r\n};\r\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,uBAAuB;;AAEvD;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3C,MAAM;IAAEC;EAAa,CAAC,GAAGH,eAAe,CAAC,CAAC;EAC1C,MAAMI,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAE9B,OAAOF,YAAY,CAACG,MAAM,CAAC,CAAC;IAAEC,IAAI;IAAEC;EAAY,CAAC,KAAK;IACpD,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;;IAE9B;IACA,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IACpD,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAAC,CAAC;IAC3BS,QAAQ,CAACC,QAAQ,CAACN,KAAK,EAAEC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEvC;IACA,OAAOI,QAAQ,GAAGV,WAAW;EAC/B,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAF,EAAA,CAjBaD,uBAAuB;EAAA,QACTD,eAAe;AAAA;AAiB1C,OAAO,MAAMgB,2BAA2B,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/C,MAAMC,cAAc,GAAGjB,uBAAuB,CAAC,CAAC;EAChD,OAAOiB,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC;AAACF,GAAA,CAHWD,2BAA2B;EAAA,QACff,uBAAuB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}