{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useBookingTimes } from '../BookingTimesContext';\n\n// Helper function to filter available booking times that are also in the future\nexport const filterAvailableTimes = () => {\n  _s();\n  const {\n    bookingTimes\n  } = useBookingTimes();\n  const currentTime = new Date();\n  return bookingTimes.filter(({\n    time,\n    isAvailable\n  }) => {\n    if (!isAvailable) return false;\n\n    // Converts 24hr time to a Date object for today to compare with the current time\n    // makes this easier\n    const [hours, minutes] = time.split(':').map(Number);\n    const timeDate = new Date();\n    timeDate.setHours(hours, minutes, 0, 0);\n\n    // Only include times that are in the future\n    return timeDate > currentTime;\n  });\n};\n\n// Helper function to get the first three available future times\n_s(filterAvailableTimes, \"5SQ6XY1VaxsuA6tFct1p2hmZs+A=\", false, function () {\n  return [useBookingTimes];\n});\nexport const getFirstThreeAvailableTimes = () => {\n  const availableTimes = filterAvailableTimes();\n  return availableTimes.slice(0, 3); // Get only the first three available times\n};","map":{"version":3,"names":["useBookingTimes","filterAvailableTimes","_s","bookingTimes","currentTime","Date","filter","time","isAvailable","hours","minutes","split","map","Number","timeDate","setHours","getFirstThreeAvailableTimes","availableTimes","slice"],"sources":["C:/SlyStudios/Coursera/SlyCapstoneProject/src/utilities/filterAvailableTimes.js"],"sourcesContent":["import { useBookingTimes } from '../BookingTimesContext';\r\n\r\n// Helper function to filter available booking times that are also in the future\r\nexport const filterAvailableTimes = () => {\r\n  const { bookingTimes } = useBookingTimes();\r\n  const currentTime = new Date();\r\n\r\n  return bookingTimes.filter(({ time, isAvailable }) => {\r\n    if (!isAvailable) return false;\r\n\r\n    // Converts 24hr time to a Date object for today to compare with the current time\r\n    // makes this easier\r\n    const [hours, minutes] = time.split(':').map(Number);\r\n    const timeDate = new Date();\r\n    timeDate.setHours(hours, minutes, 0, 0);\r\n\r\n    // Only include times that are in the future\r\n    return timeDate > currentTime;\r\n  });\r\n};\r\n\r\n// Helper function to get the first three available future times\r\nexport const getFirstThreeAvailableTimes = () => {\r\n  const availableTimes = filterAvailableTimes();\r\n  return availableTimes.slice(0, 3); // Get only the first three available times\r\n};\r\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,wBAAwB;;AAExD;AACA,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAa,CAAC,GAAGH,eAAe,CAAC,CAAC;EAC1C,MAAMI,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAE9B,OAAOF,YAAY,CAACG,MAAM,CAAC,CAAC;IAAEC,IAAI;IAAEC;EAAY,CAAC,KAAK;IACpD,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;;IAE9B;IACA;IACA,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;IACpD,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAAC,CAAC;IAC3BS,QAAQ,CAACC,QAAQ,CAACN,KAAK,EAAEC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;;IAEvC;IACA,OAAOI,QAAQ,GAAGV,WAAW;EAC/B,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAF,EAAA,CAlBaD,oBAAoB;EAAA,QACND,eAAe;AAAA;AAkB1C,OAAO,MAAMgB,2BAA2B,GAAGA,CAAA,KAAM;EAC/C,MAAMC,cAAc,GAAGhB,oBAAoB,CAAC,CAAC;EAC7C,OAAOgB,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}